#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุชุญููู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅูู ุงูุดูู ุงูุฌุฏูุฏ ุงููุทููุจ
"""

import pandas as pd
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from datetime import datetime
import os
from database_manager import DatabaseManager

# ูุงููุณ ููุงุชูุญ ุงููุญุงูุธุงุช
GOVERNORATE_CODES = {
    'ุจุบุฏุงุฏ': 'BGD',
    'ุงููุงุตุฑูุฉ ุฐู ูุงุฑ': 'NAS',
    'ุฏูุงูู': 'DYL',
    'ุงูููุช ูุงุณุท': 'KOT',
    'ูุฑุจูุงุก': 'KRB',
    'ุฏููู': 'DOH',
    'ุจุงุจู ุงูุญูุฉ': 'BBL',
    'ุงููุฌู': 'NJF',
    'ุงูุจุตุฑุฉ': 'BAS',
    'ุงุฑุจูู': 'ARB',
    'ูุฑููู': 'KRK',
    'ุงูุณูููุงููู': 'SMH',
    'ุตูุงุญ ุงูุฏูู': 'SAH',
    'ุงูุงูุจุงุฑ ุฑูุงุฏู': 'ANB',
    'ุงูุณูุงูุฉ ุงููุซูู': 'SAM',
    'ููุตู': 'MOS',
    'ุงูุฏููุงููุฉ': 'DWN',
    'ุงูุนูุงุฑุฉ ููุณุงู': 'AMA'
}

def get_governorate_code(governorate_name):
    """ุงูุญุตูู ุนูู ุดูุฑุฉ ุงููุญุงูุธุฉ ูู ุงูุงุณู"""
    # ุงูุจุญุซ ุงููุจุงุดุฑ
    if governorate_name in GOVERNORATE_CODES:
        return GOVERNORATE_CODES[governorate_name]
    
    # ุงูุจุญุซ ุงูุฌุฒุฆู
    for name, code in GOVERNORATE_CODES.items():
        if governorate_name in name or name in governorate_name:
            return code
    
    # ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุชุทุงุจูุ ุฅุฑุฌุงุน ุงููููุฉ ุงูุฃุตููุฉ
    return governorate_name

def convert_existing_data_to_new_format(days=30):
    """ุชุญููู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ ุฅูู ุงูุดูู ุงูุฌุฏูุฏ ุงููุทููุจ"""
    
    print(f"๐ ุชุญููู ุงูุจูุงูุงุช ููุขุฎุฑ {days} ููู...")
    
    # ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    db_manager = DatabaseManager()
    df = db_manager.get_all_invoices_for_shipping(days)
    
    if df is None or df.empty:
        print("โ ูุง ุชูุฌุฏ ุจูุงูุงุช ููุชุญููู")
        return None
    
    print(f"๐ ุชู ุงูุนุซูุฑ ุนูู {len(df)} ุทูุจ")
    
    # ุชุญููู ุงูุจูุงูุงุช ุฅูู ุงูุดูู ุงูุฌุฏูุฏ
    converted_data = []
    
    for index, row in df.iterrows():
        # ุชุญููู ุงูุจูุงูุงุช
        converted_row = {
            'ููุงุญุธุงุช': row.get('notes', ''),
            'ุนุฏุฏ ุงููุทุน\nุฃุฌุจุงุฑู': row.get('quantity', 0),
            'ูุญุชูู ุนูู ุงุฑุฌุงุน ุจุถุงุนุฉุ': 'ูุง',  # ุงูุชุฑุงุถู
            'ูุงุชู ุงููุณุชูู\nุฃุฌุจุงุฑู 11 ุฎุงูุฉ': row.get('client_phone', ''),
            'ุชูุงุตูู ุงูุนููุงู\nุฃุฌุจุงุฑู': row.get('nearest_point', ''),
            'ุดูุฑุฉ ุงููุญุงูุธุฉ\nุฃุฌุจุงุฑู': get_governorate_code(row.get('governorate', '')),
            'ุฃุณู ุงููุณุชูู': row.get('client_name', ''),
            'ุงููุจูุบ ุนุฑุงูู\nูุงูู ุจุงูุงูุงู .\nูู ุญุงู ุนุฏู ุชููุฑู ุณูุนุชุจุฑ 0': row.get('total_sales', 0)
        }
        converted_data.append(converted_row)
    
    # ุฅูุดุงุก DataFrame ุฌุฏูุฏ
    new_df = pd.DataFrame(converted_data)
    
    # ุฅูุดุงุก ููู ุงูุฅูุณู
    filename = f"ุทูุจุงุช_ูุญููุฉ_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        # ูุชุงุจุฉ ุงูุจูุงูุงุช ุงูุฑุฆูุณูุฉ
        new_df.to_excel(writer, sheet_name='ุทูุจุงุช ุงูุดุญู', index=False)
        
        # ุงูุญุตูู ุนูู ูุฑูุฉ ุงูุนูู
        workbook = writer.book
        worksheet = writer.sheets['ุทูุจุงุช ุงูุดุญู']
        
        # ุชูุณูู ุงูุนูุงููู
        header_font = Font(bold=True, color="FFFFFF", size=12)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        
        # ุชูุณูู ุญุฏูุฏ ุงูุนูุงููู
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # ุชุทุจูู ุงูุชูุณูู ุนูู ุงูุนูุงููู
        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = thin_border
        
        # ุชุนุฏูู ุนุฑุถ ุงูุฃุนูุฏุฉ
        column_widths = {
            'A': 20,  # ููุงุญุธุงุช
            'B': 15,  # ุนุฏุฏ ุงููุทุน
            'C': 25,  # ุงุฑุฌุงุน ุจุถุงุนุฉ
            'D': 25,  # ูุงุชู ุงููุณุชูู
            'E': 30,  # ุชูุงุตูู ุงูุนููุงู
            'F': 20,  # ุดูุฑุฉ ุงููุญุงูุธุฉ
            'G': 20,  # ุฃุณู ุงููุณุชูู
            'H': 35   # ุงููุจูุบ ุนุฑุงูู
        }
        
        for col_letter, width in column_widths.items():
            worksheet.column_dimensions[col_letter].width = width
        
        # ุชูุณูู ุงูุจูุงูุงุช
        data_alignment = Alignment(horizontal="center", vertical="center")
        data_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # ุชุทุจูู ุงูุชูุณูู ุนูู ุงูุจูุงูุงุช
        for row in worksheet.iter_rows(min_row=2):
            for cell in row:
                cell.alignment = data_alignment
                cell.border = data_border
        
        # ุฅูุดุงุก ูุฑูุฉ ููุงุชูุญ ุงููุญุงูุธุงุช
        governorate_sheet = workbook.create_sheet("ููุงุชูุญ ุงููุญุงูุธุงุช")
        
        # ุฅุถุงูุฉ ููุงุชูุญ ุงููุญุงูุธุงุช
        governorate_data = []
        for governorate, code in GOVERNORATE_CODES.items():
            governorate_data.append([governorate, code])
        
        governorate_df = pd.DataFrame(governorate_data, columns=['ุงููุญุงูุธุฉ', 'ุงูุดูุฑุฉ'])
        governorate_df.to_excel(writer, sheet_name='ููุงุชูุญ ุงููุญุงูุธุงุช', index=False)
        
        # ุชูุณูู ูุฑูุฉ ููุงุชูุญ ุงููุญุงูุธุงุช
        gov_worksheet = writer.sheets['ููุงุชูุญ ุงููุญุงูุธุงุช']
        
        # ุชูุณูู ุงูุนูุงููู
        for cell in gov_worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = thin_border
        
        # ุชุนุฏูู ุนุฑุถ ุงูุฃุนูุฏุฉ
        gov_worksheet.column_dimensions['A'].width = 25
        gov_worksheet.column_dimensions['B'].width = 15
        
        # ุชูุณูู ุงูุจูุงูุงุช
        for row in gov_worksheet.iter_rows(min_row=2):
            for cell in row:
                cell.alignment = data_alignment
                cell.border = data_border
        
        # ุฅูุดุงุก ูุฑูุฉ ููุฎุต ุงูุชุญููู
        summary_sheet = workbook.create_sheet("ููุฎุต ุงูุชุญููู")
        
        summary_data = [
            ['ููุฎุต ุชุญููู ุงูุจูุงูุงุช'],
            [''],
            ['ุชุงุฑูุฎ ุงูุชุญููู:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ['ุนุฏุฏ ุงูุทูุจุงุช ุงููุญููุฉ:', len(converted_data)],
            ['ูุชุฑุฉ ุงูุจูุงูุงุช:', f'ุขุฎุฑ {days} ููู'],
            [''],
            ['ุชูุงุตูู ุงูุชุญููู:'],
            ['- ุชู ุชุญููู ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅูู ุงูุดูู ุงูุฌุฏูุฏ'],
            ['- ุชู ุฅุถุงูุฉ ุดูุฑุงุช ุงููุญุงูุธุงุช ุชููุงุฆูุงู'],
            ['- ุชู ุชุนููู "ูุง" ููููุฉ ุงูุชุฑุงุถูุฉ ูุนููุฏ "ูุญุชูู ุนูู ุงุฑุฌุงุน ุจุถุงุนุฉุ"'],
            ['- ุชู ุงูุญูุงุธ ุนูู ุฌููุน ุงูุจูุงูุงุช ุงูุฃุตููุฉ'],
            [''],
            ['ููุงุญุธุงุช:'],
            ['- ุฑุงุฌุน ุงูุจูุงูุงุช ุงููุญููุฉ ูุชุฃูุฏ ูู ุตุญุชูุง'],
            ['- ูููู ุชุนุฏูู ุงูุจูุงูุงุช ูุฏููุงู ุฅุฐุง ูุฒู ุงูุฃูุฑ'],
            ['- ุงุณุชุฎุฏู ูุฑูุฉ "ููุงุชูุญ ุงููุญุงูุธุงุช" ููุชุญูู ูู ุงูุดูุฑุงุช']
        ]
        
        for i, summary in enumerate(summary_data, 1):
            summary_sheet[f'A{i}'] = summary[0]
            if i == 1:  # ุงูุนููุงู ุงูุฑุฆูุณู
                summary_sheet[f'A{i}'].font = Font(bold=True, size=14)
            elif i in [7, 13]:  # ุงูุนูุงููู ุงููุฑุนูุฉ
                summary_sheet[f'A{i}'].font = Font(bold=True, size=12)
        
        # ุชุนุฏูู ุนุฑุถ ุนููุฏ ุงูููุฎุต
        summary_sheet.column_dimensions['A'].width = 60
    
    print(f"โ ุชู ุฅูุดุงุก ููู ุงูุจูุงูุงุช ุงููุญููุฉ ุจูุฌุงุญ: {filename}")
    print(f"๐ ุชู ุชุญููู {len(converted_data)} ุทูุจ")
    
    return filename

def show_conversion_stats():
    """ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุชุญููู"""
    
    db_manager = DatabaseManager()
    
    # ุฅุญุตุงุฆูุงุช ุนุงูุฉ
    print("๐ ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:")
    print("=" * 40)
    
    # ุฅุฌูุงูู ุงูููุงุชูุฑ
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM invoices")
    total_invoices = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM invoices WHERE created_at >= datetime('now', '-1 day')")
    today_invoices = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM invoices WHERE created_at >= datetime('now', '-7 days')")
    week_invoices = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM invoices WHERE created_at >= datetime('now', '-30 days')")
    month_invoices = cursor.fetchone()[0]
    
    conn.close()
    
    print(f"ุฅุฌูุงูู ุงูููุงุชูุฑ: {total_invoices}")
    print(f"ููุงุชูุฑ ุงูููู: {today_invoices}")
    print(f"ููุงุชูุฑ ุงูุฃุณุจูุน: {week_invoices}")
    print(f"ููุงุชูุฑ ุงูุดูุฑ: {month_invoices}")
    
    # ุฅุญุตุงุฆูุงุช ุงููุญุงูุธุงุช
    print("\n๐๏ธ ุฅุญุตุงุฆูุงุช ุงููุญุงูุธุงุช:")
    print("-" * 30)
    
    df = db_manager.get_all_invoices_for_shipping(365)  # ุณูุฉ ูุงููุฉ
    if df is not None and not df.empty:
        governorate_stats = df['governorate'].value_counts()
        for governorate, count in governorate_stats.head(10).items():
            code = get_governorate_code(governorate)
            print(f"{governorate} ({code}): {count} ุทูุจ")

if __name__ == "__main__":
    print("๐ ุชุญููู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ ุฅูู ุงูุดูู ุงูุฌุฏูุฏ...")
    print("=" * 60)
    
    # ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช
    show_conversion_stats()
    
    print("\n" + "=" * 60)
    
    # ุชุญููู ุงูุจูุงูุงุช ููุขุฎุฑ 30 ููู
    converted_file = convert_existing_data_to_new_format(days=30)
    
    if converted_file:
        print(f"\n๐ ุงูููู ุงูููุดุฃ: {converted_file}")
        print("๐ฏ ููููู ุงูุขู ุงุณุชุฎุฏุงู ูุฐุง ุงูููู ููุดุญู!")
    else:
        print("\nโ ูู ูุชู ุฅูุดุงุก ุฃู ููู")
